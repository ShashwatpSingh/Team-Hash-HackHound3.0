services:
  my-hooks:
    build:
      context: ./hooks
    depends_on:
      my-pb:
        condition: service_healthy
    restart: always
    ports:
      - "3002:3002"
    env_file:
      - .env

  my-workertrigger:
    build:
      context: ./workerTrigger
    depends_on:
      my-pb:
        condition: service_healthy
    restart: always
    env_file:
      - .env

  my-processortrigger:
    build:
      context: ./processorTrigger
    depends_on:
      my-pb:
        condition: service_healthy
    restart: always
    env_file:
      - .env

  my-pb:
    build:
      context: ./primary-backend
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    ports:
      - "3000:3000"
    env_file:
      - .env
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "nc -z localhost 3000 || exit 1" ]
      interval: 10s
      retries: 5
      start_period: 10s
      timeout: 5s

  my-processor:
    build:
      context: ./processor
    depends_on:
      my-pb:
        condition: service_healthy
    restart: always
    env_file:
      - .env

  my-worker:
    build: ./worker
    depends_on:
      my-pb:
        condition: service_healthy
    restart: always
    env_file:
      - .env

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT"
      KAFKA_INTER_BROKER_LISTENER_NAME: "PLAINTEXT"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: [ "CMD-SHELL", "nc -z localhost 29092 || exit 1" ]
      interval: 10s
      retries: 5
      timeout: 5s

  postgres:
    image: postgres:16.3
    environment:
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
      POSTGRES_DB: mydatabase
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "sh -c 'pg_isready -U myuser -d mydatabase'" ]
      interval: 10s
      timeout: 3s
      retries: 3

volumes:
  postgres_data: {}
